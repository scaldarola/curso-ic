buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}

	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.21"
		classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
		classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:5.0.7"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: "jacoco"
apply plugin: "org.flywaydb.flyway"

sourceSets {

	acceptanceTest {

		java {
			compileClasspath += main.output
			compileClasspath += main.compileClasspath

			compileClasspath += test.output
			compileClasspath += test.compileClasspath

			runtimeClasspath += test.runtimeClasspath

			srcDir file('src/acceptance-test/java')
		}
		resources.srcDir file('src/acceptance-test/resources')
	}
}

task verify(type: Test) {

	testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
	classpath = sourceSets.acceptanceTest.runtimeClasspath

	dependsOn 'test'
	//verify.mustRunAfter 'test'
}

def appVersion =  System.properties['appVersion']?:'0.0.1-SNAPSHOT'
println "appVersion[$appVersion]"

group = 'com.grupoesfera'
version = appVersion
sourceCompatibility = 1.8

def apiName = System.properties['apiName']?:'app'

println "apiName[$apiName]"
archivesBaseName = apiName

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/libs-release' }
	maven { url 'https://oss.sonatype.org/content/groups/public' }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-redis:2.0.0.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-logging:2.0.0.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-data-jpa:2.0.0.RELEASE')
	compile('com.microsoft.sqlserver:mssql-jdbc:6.4.0.jre8')

	dockerJava 'com.github.docker-java:docker-java:3.1.0-SNAPSHOT'
	dockerJava 'cglib:cglib:3.2.0'

	//TEST DEPENDENCIES
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('cglib:cglib-nodep:3.2.2')
	testCompile('io.cucumber:cucumber-java:4.2.0')
	testCompile('io.cucumber:cucumber-junit:4.2.0')
	testCompile('io.rest-assured:rest-assured:3.2.0')
	runtime('com.h2database:h2:1.4.196')
}

// ===== Docker

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
	dependsOn build
	destFile = project.file("${buildDir}/libs/Dockerfile")
	from 'frolvlad/alpine-oraclejdk8:slim'
	volume "/tmp"
	maintainer 'maty "matias.gonzalez@grupoesfera.com.ar"'
	addFile "./${archivesBaseName}-${version}.jar", "/app.jar"
	runCommand "sh -c 'touch /app.jar'"
	environmentVariable "JAVA_OPTS", '""'
	entryPoint "sh", "-c", "java \$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar"
}

task buildImage(type: DockerBuildImage) {
	dependsOn createDockerfile
	inputDir = createDockerfile.destFile.parentFile
	tag = "${archivesBaseName}:${version}"
}
// ===== End Docker

def flywayServer = System.properties['flywayServer'] ?: 'localhost'
println "flywayServer[$flywayServer]"

flyway {
	url = "jdbc:sqlserver://$flywayServer:1433;databaseName=demo"
	user = 'sa'
	password = 'Pa$$w0rd1'
	baselineOnMigrate = true
	baselineVersion = 0
	schemas = ["dbo"]
}
